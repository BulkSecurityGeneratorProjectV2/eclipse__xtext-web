/*******************************************************************************
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.eclipse.xtext.web.example.statemachine.GenerateStatemachine

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.xtext.generator.*

var projectName = "org.eclipse.xtext.web.example.statemachine"
var runtimeProject = "../${projectName}"

var grammarURI = "classpath:/org/eclipse/xtext/web/example/statemachine/Statemachine.xtext"
var fileExtensions = "statemachine"

var generateXtendStub = true
var encoding = "UTF-8"
var fileHeader = "/*******************************************************************************
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/"

Workflow {
    bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ide/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.web/src/main/xtext-gen"
	}
	
	component = XtextGenerator auto-inject {
		configuration = {
			project = WizardConfig {
				runtimeRoot = runtimeProject
				genericIdeSupport = true
				eclipseEditor = false
				webSupport = true
				webRoot = "../org.eclipse.xtext.web.example.jetty"
				webSrc = "../org.eclipse.xtext.web.example.jetty/src/main/java"
				webSrcGen = "../org.eclipse.xtext.web.example.jetty/src/main/xtext-gen"
				webApp = "../org.eclipse.xtext.web.example.jetty/src/main/webapp"
			}
			code = auto-inject {}
		}
		language = auto-inject {
			uri = grammarURI
			naming = {
				webBasePackage = "org.eclipse.xtext.web.example.jetty"
			}

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment2 auto-inject {}

			fragment = adapter.FragmentAdapter {
				fragment = serializer.SerializerFragment auto-inject {
					generateStub = false
				}
			}

			// a custom ResourceFactory for use with EMF
			fragment = adapter.FragmentAdapter {
				fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
			}

			// The antlr parser generator fragment.
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
				}
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 auto-inject {
			    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 auto-inject {}
			fragment = exporting.QualifiedNamesFragment2 auto-inject {}

			// generator API
			fragment = generator.GeneratorFragment2 auto-inject {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 auto-inject {}
			
			// a light-weight parser used for content assist
			fragment = adapter.FragmentAdapter {
				fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
			}
			
			// JavaScript-based syntax highlighting
			fragment = web.WebIntegrationFragment auto-inject {
				framework = "Orion"
				highlightingModuleName = "xtext/statemachine-syntax"
			}
			fragment = web.WebIntegrationFragment auto-inject {
				framework = "Ace"
				highlightingModuleName = "xtext/ace-mode-statemachine"
			}
			fragment = web.WebIntegrationFragment auto-inject {
				framework = "CodeMirror"
				highlightingModuleName = "xtext/cm-mode-statemachine"
			}
		}
	}
}
