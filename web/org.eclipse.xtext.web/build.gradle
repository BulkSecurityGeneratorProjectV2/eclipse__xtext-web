plugins {
	id "com.moowork.node" version "0.10"
}

dependencies {
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile project(':plugins:org.eclipse.xtext.ide')
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile project(':plugins:org.eclipse.xtext.junit4')
    testCompile project(':web:org.eclipse.xtext.web.example.statemachine.ide')
}

node {
	download = true
}

task testJs(type: NodeTask) {
	dependsOn(npmInstall)
	inputs.dir new File('src/test/js')
	script = file('node_modules/mocha/bin/mocha')
	args = ['src/test/js/*.js']
}

def requireJsPlugins = file("$buildDir/tmp/js/requirejs-plugins")
task downloadRequireJsPlugins {
	onlyIf {!requireJsPlugins.exists()}
	doLast {
		requireJsPlugins.mkdirs()
		ant.get(src: 'https://raw.github.com/requirejs/i18n/latest/i18n.js', dest: requireJsPlugins.path + "/i18n.js")
		ant.get(src: 'https://raw.github.com/requirejs/text/latest/text.js', dest: requireJsPlugins.path + "/text.js")
	}
}

def optResources = file("$buildDir/opt-resources/META-INF/resources/xtext/${project.version}")

task optimizeOrionJs(type: NodeTask) {
	dependsOn(npmInstall, downloadRequireJsPlugins)
	inputs.dir new File('src/main/js')
	def out = file(optResources.path + '/xtext-orion.js')
	outputs.file out
	def buildProfile = file('src/main/js/requirejs-orion-config.js')
	script = file('node_modules/requirejs/bin/r.js')
	args = ['-o', buildProfile.path, 'optimize=none', 'out=' + out.path]
}

task optimizeOrionJsMin(type: NodeTask) {
	dependsOn(npmInstall, downloadRequireJsPlugins)
	inputs.dir new File('src/main/js')
	def out = file(optResources.path + '/xtext-orion.min.js')
	outputs.file out
	def buildProfile = file('src/main/js/requirejs-orion-config.js')
	script = file('node_modules/requirejs/bin/r.js')
	args = ['-o', buildProfile.path, 'optimize=uglify', 'preserveLicenseComments=false', 'out=' + out.path]
}

task optimizeOrionCss(type: NodeTask) {
	dependsOn(npmInstall)
	inputs.dir new File('src/main/css')
	def out = file(optResources.path + '/xtext-orion.css')
	outputs.file out
	script = file('node_modules/requirejs/bin/r.js')
	args = ['-o', 'cssIn=src/main/css/xtext/xtext-orion.css', 'out=' + out.path]
}

task optimizeAceJs(type: NodeTask) {
	dependsOn(npmInstall)
	inputs.dir new File('src/main/js')
	def out = file(optResources.path + '/xtext-ace.js')
	outputs.file out
	def buildProfile = file('src/main/js/requirejs-ace-config.js')
	script = file('node_modules/requirejs/bin/r.js')
	args = ['-o', buildProfile.path, 'optimize=none', 'out=' + out.path]
}

task optimizeAceJsMin(type: NodeTask) {
	dependsOn(npmInstall)
	inputs.dir new File('src/main/js')
	def out = file(optResources.path + '/xtext-ace.min.js')
	outputs.file out
	def buildProfile = file('src/main/js/requirejs-ace-config.js')
	script = file('node_modules/requirejs/bin/r.js')
	args = ['-o', buildProfile.path, 'optimize=uglify', 'preserveLicenseComments=false', 'out=' + out.path]
}

task optimizeAceCss(type: NodeTask) {
	dependsOn(npmInstall)
	inputs.dir new File('src/main/css')
	def out = file(optResources.path + '/xtext-ace.css')
	outputs.file out
	script = file('node_modules/requirejs/bin/r.js')
	args = ['-o', 'cssIn=src/main/css/xtext/xtext-ace.css', 'out=' + out.path]
}

sourceSets.main.resources.srcDir "$buildDir/opt-resources"
processResources.dependsOn(optimizeOrionJs, optimizeOrionJsMin, optimizeOrionCss, optimizeAceJs, optimizeAceJsMin, optimizeAceCss)
